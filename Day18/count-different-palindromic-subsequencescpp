class Solution {
public:
    int mod = 1000000007;

    int countPalindromicSubsequences(string s) {
        int n = s.size();
        vector<vector<long>> dp(n, vector<long>(n, 0));

        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }

        for (int len = 2; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int j = i + len - 1;
                if (s[i] == s[j]) {
                    int low = i + 1;
                    int high = j - 1;
                    
                    while (low <= high && s[low] != s[i]) low++;
                    while (low <= high && s[high] != s[j]) high--;

                    if (low > high) {
                        dp[i][j] = (2 * dp[i + 1][j - 1] + 2) % mod;
                    } else if (low == high) {
                        dp[i][j] = (2 * dp[i + 1][j - 1] + 1) % mod;
                    } else {
                        dp[i][j] = (2 * dp[i + 1][j - 1] - dp[low + 1][high - 1] + mod) % mod;
                    }
                } else {
                    dp[i][j] = (dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1] + mod) % mod;
                }
            }
        }

        return dp[0][n - 1];
    }
};
